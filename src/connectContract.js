const ethers = require("ethers");
const fs = require("fs");

const RPC_SERVER_ADDR = "HTTP://127.0.0.1:7545"; // 개발 중이므로 로컬 ganache address 이용 => 추후 롭슨 테스트넷이나 메인넷 주소로 변경 요망
let contractABI = JSON.parse(fs.readFileSync("./contractInfo/Trade.json"));
let contractBytesCode =
  "0x608060405260405162000f7d38038062000f7d8339818101604052810190620000299190620001a3565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460058190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555060006004819055506000600660006101000a81548160ff02191690836005811115620000f057620000ef620001ff565b5b02179055505050506200022e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001308262000103565b9050919050565b620001428162000123565b81146200014e57600080fd5b50565b600081519050620001628162000137565b92915050565b6000819050919050565b6200017d8162000168565b81146200018957600080fd5b50565b6000815190506200019d8162000172565b92915050565b600080600060608486031215620001bf57620001be620000fe565b5b6000620001cf8682870162000151565b9350506020620001e2868287016200018c565b9250506040620001f5868287016200018c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610d3f806200023e6000396000f3fe6080604052600436106100a75760003560e01c8063526ff16f11610064578063526ff16f1461016a5780637150d8ae14610195578063a035b1fe146101c0578063d8d79700146101eb578063ea8a1af014610209578063f9fb452f14610213576100a7565b8063056baaba146100ac57806308551a53146100b6578063234d442b146100e15780632acdbd8a146100eb578063367e441114610116578063419759f51461013f575b600080fd5b6100b461023e565b005b3480156100c257600080fd5b506100cb610364565b6040516100d891906108e2565b60405180910390f35b6100e9610388565b005b3480156100f757600080fd5b50610100610573565b60405161010d9190610974565b60405180910390f35b34801561012257600080fd5b5061013d600480360381019061013891906109ca565b610586565b005b34801561014b57600080fd5b50610154610613565b6040516101619190610a06565b60405180910390f35b34801561017657600080fd5b5061017f610619565b60405161018c9190610a06565b60405180910390f35b3480156101a157600080fd5b506101aa61061f565b6040516101b791906108e2565b60405180910390f35b3480156101cc57600080fd5b506101d5610645565b6040516101e29190610a06565b60405180910390f35b6101f361064b565b6040516102009190610a3c565b60405180910390f35b61021161071c565b005b34801561021f57600080fd5b5061022861089b565b6040516102359190610a06565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c590610ab4565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610336573d6000803e3d6000fd5b506005600660006101000a81548160ff0219169083600581111561035d5761035c6108fd565b5b0217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90610b20565b60405180910390fd5b60006004540361045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045490610b8c565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6005546003546104a79190610bdb565b9081150290604051600060405180830381858888f193505050501580156104d2573d6000803e3d6000fd5b50600047111561054657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610544573d6000803e3d6000fd5b505b6004600660006101000a81548160ff0219169083600581111561056c5761056b6108fd565b5b0217905550565b600660009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105de57600080fd5b806004819055506002600660006101000a81548160ff0219169083600581111561060b5761060a6108fd565b5b021790555050565b60055481565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156106ab575060035434145b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190610c7d565b60405180910390fd5b6001600660006101000a81548160ff021916908360058111156107105761070f6108fd565b5b02179055506001905090565b600260058111156107305761072f6108fd565b5b600660009054906101000a900460ff166005811115610752576107516108fd565b5b03610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990610ce9565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6005549081150290604051600060405180830381858888f193505050501580156107fa573d6000803e3d6000fd5b50600047111561086e57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561086c573d6000803e3d6000fd5b505b6003600660006101000a81548160ff02191690836005811115610894576108936108fd565b5b0217905550565b60025481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108cc826108a1565b9050919050565b6108dc816108c1565b82525050565b60006020820190506108f760008301846108d3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061093d5761093c6108fd565b5b50565b600081905061094e8261092c565b919050565b600061095e82610940565b9050919050565b61096e81610953565b82525050565b60006020820190506109896000830184610965565b92915050565b600080fd5b6000819050919050565b6109a781610994565b81146109b257600080fd5b50565b6000813590506109c48161099e565b92915050565b6000602082840312156109e0576109df61098f565b5b60006109ee848285016109b5565b91505092915050565b610a0081610994565b82525050565b6000602082019050610a1b60008301846109f7565b92915050565b60008115159050919050565b610a3681610a21565b82525050565b6000602082019050610a516000830184610a2d565b92915050565b600082825260208201905092915050565b7f63616c6c6572206d7573742062652062757965722e0000000000000000000000600082015250565b6000610a9e601583610a57565b9150610aa982610a68565b602082019050919050565b60006020820190508181036000830152610acd81610a91565b9050919050565b7f6d73672e73656e646572206973206e6f74206275796572210000000000000000600082015250565b6000610b0a601883610a57565b9150610b1582610ad4565b602082019050919050565b60006020820190508181036000830152610b3981610afd565b9050919050565b7f747261636b696e674e756d62657220686173206e6f74206265656e207365742e600082015250565b6000610b76602083610a57565b9150610b8182610b40565b602082019050919050565b60006020820190508181036000830152610ba581610b69565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610be682610994565b9150610bf183610994565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c2657610c25610bac565b5b828201905092915050565b7f4e6f7420656e6f75676820455448000000000000000000000000000000000000600082015250565b6000610c67600e83610a57565b9150610c7282610c31565b602082019050919050565b60006020820190508181036000830152610c9681610c5a565b9050919050565b7f416c726561647920736869707065642e00000000000000000000000000000000600082015250565b6000610cd3601083610a57565b9150610cde82610c9d565b602082019050919050565b60006020820190508181036000830152610d0281610cc6565b905091905056fea2646970667358221220f5db73cbcf6aceea0eeeb30469ecc7abb787a143ef0a251326f0d4060010959f64736f6c634300080e0033";
let provider = ethers.getDefaultProvider(RPC_SERVER_ADDR);

async function getSellerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.seller();
}

async function getBuyerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.buyer();
}

async function getPrice(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.price()).toString();
}

async function getTrackingNumber(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.trackingNumber()).toNumber();
}

async function getCurrentState(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.currentTradeState()).toNumber();
}

async function setTrackingNumber(contractAddress, privatekey, trackingNumber) {
  let wallet = new ethers.Wallet(privatekey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.setTrackingNumber(trackingNumber);
  await tx.wait(); // must wait until it is mined
}

async function makePayment(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let price = getPrice(contractAddress);
  let options = { value: price };
  let tx = await contractWithSigner.makePayment(options);

  await tx.wait(); // must wait until it is mined
}

async function completeTrade(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);

  let tx = await contractWithSigner.completeTrade();
  await tx.wait();
}

async function cancel(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.cancel(option);
  await tx.wait();
}

async function returnProduct(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.returnProduct();
  await tx.wait();
}

module.exports = {
  getBuyerAddr,
  getSellerAddr,
  getPrice,
  getCurrentState,
  completeTrade,
  getTrackingNumber,
  setTrackingNumber,
  makePayment,
  cancel,
  returnProduct
};
