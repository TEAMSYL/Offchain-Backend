const ethers = require("ethers");
const fs = require("fs");

const RPC_SERVER_ADDR = "HTTP://127.0.0.1:7545"; // 개발 중이므로 로컬 ganache address 이용 => 추후 롭슨 테스트넷이나 메인넷 주소로 변경 요망
let contractABI = JSON.parse(fs.readFileSync("./contractInfo/Trade.json"));
let contractBytesCode =
  "0x60806040526040516200160b3803806200160b83398181016040528101906200002991906200027b565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460068190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555060006004819055506040518060200160405280600081525060059080519060200190620000ee92919062000126565b506000600760006101000a81548160ff02191690836005811115620001185762000117620002d7565b5b02179055505050506200036a565b828054620001349062000335565b90600052602060002090601f016020900481019282620001585760008555620001a4565b82601f106200017357805160ff1916838001178555620001a4565b82800160010185558215620001a4579182015b82811115620001a357825182559160200191906001019062000186565b5b509050620001b39190620001b7565b5090565b5b80821115620001d2576000816000905550600101620001b8565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020882620001db565b9050919050565b6200021a81620001fb565b81146200022657600080fd5b50565b6000815190506200023a816200020f565b92915050565b6000819050919050565b620002558162000240565b81146200026157600080fd5b50565b60008151905062000275816200024a565b92915050565b600080600060608486031215620002975762000296620001d6565b5b6000620002a78682870162000229565b9350506020620002ba8682870162000264565b9250506040620002cd8682870162000264565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034e57607f821691505b60208210810362000364576200036362000306565b5b50919050565b611291806200037a6000396000f3fe6080604052600436106100dd5760003560e01c80635ec06cc11161007f578063a035b1fe11610059578063a035b1fe1461025c578063d8d7970014610287578063ea8a1af0146102a5578063f9fb452f146102af576100dd565b80635ec06cc1146101dd5780636dc76f24146102085780637150d8ae14610231576100dd565b80632acdbd8a116100bb5780632acdbd8a14610133578063367e44111461015e578063419759f514610187578063526ff16f146101b2576100dd565b806308551a53146100e25780630b5e1be11461010d578063234d442b14610129575b600080fd5b3480156100ee57600080fd5b506100f76102da565b6040516101049190610b41565b60405180910390f35b61012760048036038101906101229190610cec565b6102fe565b005b610131610444565b005b34801561013f57600080fd5b5061014861062f565b6040516101559190610dbf565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190610dda565b610642565b005b34801561019357600080fd5b5061019c6106cf565b6040516101a99190610e16565b60405180910390f35b3480156101be57600080fd5b506101c76106d5565b6040516101d49190610e16565b60405180910390f35b3480156101e957600080fd5b506101f26106db565b6040516101ff9190610eb9565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190610edb565b610769565b005b34801561023d57600080fd5b506102466107db565b6040516102539190610b41565b60405180910390f35b34801561026857600080fd5b50610271610801565b60405161027e9190610e16565b60405180910390f35b61028f610807565b60405161029c9190610f3f565b60405180910390f35b6102ad6108d8565b005b3480156102bb57600080fd5b506102c4610a57565b6040516102d19190610e16565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590610fa6565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103f6573d6000803e3d6000fd5b50816004819055508060059080519060200190610414929190610a5d565b506005600760006101000a81548160ff0219169083600581111561043b5761043a610d48565b5b02179055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90611012565b60405180910390fd5b600060045403610519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105109061107e565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60065460035461056391906110cd565b9081150290604051600060405180830381858888f1935050505015801561058e573d6000803e3d6000fd5b50600047111561060257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610600573d6000803e3d6000fd5b505b6004600760006101000a81548160ff0219169083600581111561062857610627610d48565b5b0217905550565b600760009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069a57600080fd5b806004819055506002600760006101000a81548160ff021916908360058111156106c7576106c6610d48565b5b021790555050565b60065481565b60045481565b600580546106e890611152565b80601f016020809104026020016040519081016040528092919081815260200182805461071490611152565b80156107615780601f1061073657610100808354040283529160200191610761565b820191906000526020600020905b81548152906001019060200180831161074457829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c157600080fd5b80600590805190602001906107d7929190610a5d565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610867575060035434145b6108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d906111cf565b60405180910390fd5b6001600760006101000a81548160ff021916908360058111156108cc576108cb610d48565b5b02179055506001905090565b600260058111156108ec576108eb610d48565b5b600760009054906101000a900460ff16600581111561090e5761090d610d48565b5b0361094e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109459061123b565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6006549081150290604051600060405180830381858888f193505050501580156109b6573d6000803e3d6000fd5b506000471115610a2a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610a28573d6000803e3d6000fd5b505b6003600760006101000a81548160ff02191690836005811115610a5057610a4f610d48565b5b0217905550565b60025481565b828054610a6990611152565b90600052602060002090601f016020900481019282610a8b5760008555610ad2565b82601f10610aa457805160ff1916838001178555610ad2565b82800160010185558215610ad2579182015b82811115610ad1578251825591602001919060010190610ab6565b5b509050610adf9190610ae3565b5090565b5b80821115610afc576000816000905550600101610ae4565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2b82610b00565b9050919050565b610b3b81610b20565b82525050565b6000602082019050610b566000830184610b32565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b8381610b70565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf982610bb0565b810181811067ffffffffffffffff82111715610c1857610c17610bc1565b5b80604052505050565b6000610c2b610b5c565b9050610c378282610bf0565b919050565b600067ffffffffffffffff821115610c5757610c56610bc1565b5b610c6082610bb0565b9050602081019050919050565b82818337600083830152505050565b6000610c8f610c8a84610c3c565b610c21565b905082815260208101848484011115610cab57610caa610bab565b5b610cb6848285610c6d565b509392505050565b600082601f830112610cd357610cd2610ba6565b5b8135610ce3848260208601610c7c565b91505092915050565b60008060408385031215610d0357610d02610b66565b5b6000610d1185828601610b91565b925050602083013567ffffffffffffffff811115610d3257610d31610b6b565b5b610d3e85828601610cbe565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110610d8857610d87610d48565b5b50565b6000819050610d9982610d77565b919050565b6000610da982610d8b565b9050919050565b610db981610d9e565b82525050565b6000602082019050610dd46000830184610db0565b92915050565b600060208284031215610df057610def610b66565b5b6000610dfe84828501610b91565b91505092915050565b610e1081610b70565b82525050565b6000602082019050610e2b6000830184610e07565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e6b578082015181840152602081019050610e50565b83811115610e7a576000848401525b50505050565b6000610e8b82610e31565b610e958185610e3c565b9350610ea5818560208601610e4d565b610eae81610bb0565b840191505092915050565b60006020820190508181036000830152610ed38184610e80565b905092915050565b600060208284031215610ef157610ef0610b66565b5b600082013567ffffffffffffffff811115610f0f57610f0e610b6b565b5b610f1b84828501610cbe565b91505092915050565b60008115159050919050565b610f3981610f24565b82525050565b6000602082019050610f546000830184610f30565b92915050565b7f63616c6c6572206d7573742062652062757965722e0000000000000000000000600082015250565b6000610f90601583610e3c565b9150610f9b82610f5a565b602082019050919050565b60006020820190508181036000830152610fbf81610f83565b9050919050565b7f6d73672e73656e646572206973206e6f74206275796572210000000000000000600082015250565b6000610ffc601883610e3c565b915061100782610fc6565b602082019050919050565b6000602082019050818103600083015261102b81610fef565b9050919050565b7f747261636b696e674e756d62657220686173206e6f74206265656e207365742e600082015250565b6000611068602083610e3c565b915061107382611032565b602082019050919050565b600060208201905081810360008301526110978161105b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110d882610b70565b91506110e383610b70565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111185761111761109e565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061116a57607f821691505b60208210810361117d5761117c611123565b5b50919050565b7f4e6f7420656e6f75676820455448000000000000000000000000000000000000600082015250565b60006111b9600e83610e3c565b91506111c482611183565b602082019050919050565b600060208201905081810360008301526111e8816111ac565b9050919050565b7f416c726561647920736869707065642e00000000000000000000000000000000600082015250565b6000611225601083610e3c565b9150611230826111ef565b602082019050919050565b6000602082019050818103600083015261125481611218565b905091905056fea2646970667358221220371828d854aca84716b9b5946c73e99e15ce06315920779efee88fa249628e6464736f6c634300080e0033";
let provider = ethers.getDefaultProvider(RPC_SERVER_ADDR);

async function getSellerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.seller();
}

async function getBuyerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.buyer();
}

async function getPrice(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.price()).toString();
}

async function getTrackingNumber(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.trackingNumber()).toNumber();
}

async function getTrackingCode(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.trackingCode();
}

async function getCurrentState(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.currentTradeState()).toNumber();
}

async function setTrackingNumber(contractAddress, privatekey, trackingNumber) {
  let wallet = new ethers.Wallet(privatekey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.setTrackingNumber(trackingNumber);
  await tx.wait(); // must wait until it is mined
}

async function setTrackingCode(contractAddress, privatekey, trackingCode) {
  let wallet = new ethers.Wallet(privatekey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.setTrackingCode(trackingCode);
  await tx.wait(); // must wait until it is mined
}

async function makePayment(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let price = getPrice(contractAddress);
  let options = { value: price };
  let tx = await contractWithSigner.makePayment(options);

  await tx.wait(); // must wait until it is mined
}

async function completeTrade(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);

  let tx = await contractWithSigner.completeTrade();
  await tx.wait();
}

async function cancel(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.cancel();
  await tx.wait();
}

async function returnProduct(contractAddress, privateKey, trackingNumber, trackingCode) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.returnProduct(trackingNumber, trackingCode);
  await tx.wait();
}

module.exports = {
  getBuyerAddr,
  getSellerAddr,
  getPrice,
  getCurrentState,
  completeTrade,
  getTrackingNumber,
  getTrackingCode,
  setTrackingNumber,
  setTrackingCode,
  makePayment,
  cancel,
  returnProduct
};
