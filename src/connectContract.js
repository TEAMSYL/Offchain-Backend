const ethers = require("ethers");
const fs = require("fs");

const RPC_SERVER_ADDR = "HTTP://127.0.0.1:7545"; // 개발 중이므로 로컬 ganache address 이용 => 추후 롭슨 테스트넷이나 메인넷 주소로 변경 요망
let contractABI = JSON.parse(fs.readFileSync("./contractInfo/Trade.json"));
let contractBytesCode =
  "0x608060405260405162000d6338038062000d638339818101604052810190620000299190620001a3565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460058190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555060006004819055506000600660006101000a81548160ff02191690836004811115620000f057620000ef620001ff565b5b02179055505050506200022e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001308262000103565b9050919050565b620001428162000123565b81146200014e57600080fd5b50565b600081519050620001628162000137565b92915050565b6000819050919050565b6200017d8162000168565b81146200018957600080fd5b50565b6000815190506200019d8162000172565b92915050565b600080600060608486031215620001bf57620001be620000fe565b5b6000620001cf8682870162000151565b9350506020620001e2868287016200018c565b9250506040620001f5868287016200018c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610b25806200023e6000396000f3fe60806040526004361061009c5760003560e01c8063526ff16f11610064578063526ff16f146101555780637150d8ae14610180578063a035b1fe146101ab578063d8d79700146101d6578063ea8a1af0146101f4578063f9fb452f146101fe5761009c565b806308551a53146100a1578063234d442b146100cc5780632acdbd8a146100d6578063367e441114610101578063419759f51461012a575b600080fd5b3480156100ad57600080fd5b506100b6610229565b6040516100c39190610734565b60405180910390f35b6100d461024d565b005b3480156100e257600080fd5b506100eb610438565b6040516100f891906107c6565b60405180910390f35b34801561010d57600080fd5b506101286004803603810190610123919061081c565b61044b565b005b34801561013657600080fd5b5061013f6104d8565b60405161014c9190610858565b60405180910390f35b34801561016157600080fd5b5061016a6104de565b6040516101779190610858565b60405180910390f35b34801561018c57600080fd5b506101956104e4565b6040516101a29190610734565b60405180910390f35b3480156101b757600080fd5b506101c061050a565b6040516101cd9190610858565b60405180910390f35b6101de610510565b6040516101eb919061088e565b60405180910390f35b6101fc6105e1565b005b34801561020a57600080fd5b506102136106ed565b6040516102209190610858565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d490610906565b60405180910390fd5b600060045403610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990610972565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60055460035461036c91906109c1565b9081150290604051600060405180830381858888f19350505050158015610397573d6000803e3d6000fd5b50600047111561040b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610409573d6000803e3d6000fd5b505b6004600660006101000a81548160ff021916908360048111156104315761043061074f565b5b0217905550565b600660009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a357600080fd5b806004819055506002600660006101000a81548160ff021916908360048111156104d0576104cf61074f565b5b021790555050565b60055481565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610570575060035434145b6105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a690610a63565b60405180910390fd5b6001600660006101000a81548160ff021916908360048111156105d5576105d461074f565b5b02179055506001905090565b600060048111156105f5576105f461074f565b5b600660009054906101000a900460ff1660048111156106175761061661074f565b5b03610657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064e90610acf565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106bf573d6000803e3d6000fd5b506003600660006101000a81548160ff021916908360048111156106e6576106e561074f565b5b0217905550565b60025481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061071e826106f3565b9050919050565b61072e81610713565b82525050565b60006020820190506107496000830184610725565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061078f5761078e61074f565b5b50565b60008190506107a08261077e565b919050565b60006107b082610792565b9050919050565b6107c0816107a5565b82525050565b60006020820190506107db60008301846107b7565b92915050565b600080fd5b6000819050919050565b6107f9816107e6565b811461080457600080fd5b50565b600081359050610816816107f0565b92915050565b600060208284031215610832576108316107e1565b5b600061084084828501610807565b91505092915050565b610852816107e6565b82525050565b600060208201905061086d6000830184610849565b92915050565b60008115159050919050565b61088881610873565b82525050565b60006020820190506108a3600083018461087f565b92915050565b600082825260208201905092915050565b7f6d73672e73656e646572206973206e6f74206275796572210000000000000000600082015250565b60006108f06018836108a9565b91506108fb826108ba565b602082019050919050565b6000602082019050818103600083015261091f816108e3565b9050919050565b7f747261636b696e674e756d62657220686173206e6f74206265656e207365742e600082015250565b600061095c6020836108a9565b915061096782610926565b602082019050919050565b6000602082019050818103600083015261098b8161094f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109cc826107e6565b91506109d7836107e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0c57610a0b610992565b5b828201905092915050565b7f4e6f7420656e6f75676820455448000000000000000000000000000000000000600082015250565b6000610a4d600e836108a9565b9150610a5882610a17565b602082019050919050565b60006020820190508181036000830152610a7c81610a40565b9050919050565b7f4e6f74206465706f736974207965740000000000000000000000000000000000600082015250565b6000610ab9600f836108a9565b9150610ac482610a83565b602082019050919050565b60006020820190508181036000830152610ae881610aac565b905091905056fea264697066735822122009acc82f9b7081d98c3a70a8391ac93a0165136fe3d4ca8a7bc37f635898685564736f6c634300080e0033";
let provider = ethers.getDefaultProvider(RPC_SERVER_ADDR);

async function getSellerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.seller();
}

async function getBuyerAddr(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return await contract.buyer();
}

async function getPrice(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.price()).toString();
}

async function getTrackingNumber(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.trackingNumber()).toNumber();
}

async function getCurrentState(contractAddress) {
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  return ethers.BigNumber.from(await contract.currentTradeState()).toNumber();
}

async function setTrackingNumber(contractAddress, privatekey, trackingNumber) {
  let wallet = new ethers.Wallet(privatekey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let tx = await contractWithSigner.setTrackingNumber(trackingNumber);
  await tx.wait(); // must wait until it is mined
}

async function makePayment(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let price = getPrice(contractAddress);
  let options = { value: price };
  let tx = await contractWithSigner.makePayment(options);

  await tx.wait(); // must wait until it is mined
}

async function completeTrade(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);

  let tx = await contractWithSigner.completeTrade();
  await tx.wait();
}

async function cancel(contractAddress, privateKey) {
  let wallet = new ethers.Wallet(privateKey, provider);
  let contract = new ethers.Contract(contractAddress, contractABI, provider);
  let contractWithSigner = contract.connect(wallet);
  let option = { gasLimit: 3e7 };
  let tx = await contractWithSigner.cancel(option);
  await tx.wait();
  console.log('트랜잭션:', tx);
}

module.exports = {
  getBuyerAddr,
  getSellerAddr,
  getPrice,
  getCurrentState,
  completeTrade,
  getTrackingNumber,
  setTrackingNumber,
  makePayment,
  cancel,
};
